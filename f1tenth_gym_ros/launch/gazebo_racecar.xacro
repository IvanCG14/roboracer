<?xml version="1.0"?>
<!-- Gazebo-enhanced version of F1Tenth ego racecar -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="racecar">

  <xacro:arg name="use_ros2_control" default="false"/>

  <!-- Importar propiedades del archivo original -->
  <xacro:property name="wheelbase" value="0.24" />
  <xacro:property name="width" value="0.16" />
  <xacro:property name="height" value="0.1" />
  <xacro:property name="ground_offset" value="0.04" />
  <xacro:property name="wheel_radius" value="0.04" />
  <xacro:property name="wheel_length" value="0.04" />
  <xacro:property name="laser_distance_from_base_link" value="0.2" />
  <xacro:property name="laser_height" value="0.04" />
  <xacro:property name="laser_radius" value="0.033" />
  <xacro:property name="car_name" value="ego_racecar" />

  <!-- Propiedades de la cámara -->
  <xacro:property name="camera_width" value="0.09" />
  <xacro:property name="camera_height" value="0.02" />
  <xacro:property name="camera_length" value="0.025" />
  <xacro:property name="camera_offset_z" value="0.01" />  <!-- Altura sobre el LIDAR -->

  <!-- Propiedades físicas para Gazebo -->
  <xacro:property name="chassis_mass" value="4.0" />
  <xacro:property name="wheel_mass" value="0.05" />
  <xacro:property name="wheel_mu1" value="0.8" />
  <xacro:property name="wheel_mu2" value="0.8" />

  <!-- Materiales -->
  <material name="black">
    <color rgba="0.2 0.2 0.2 1."/>
  </material>
  <material name="blue">
    <color rgba="0.3 0.57 1. 1."/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1."/>
  </material>

  <!-- BASE LINK con elementos visual, collision e inertial -->
  <link name="${car_name}/base_link">
    <!-- Visual (original) -->
    <visual>
      <origin xyz="${wheelbase/2} 0 ${ground_offset+height/2}"/>
      <geometry>
        <box size="${wheelbase} ${width} ${height}"/>
      </geometry>
      <material name="blue"/>
    </visual>
    
    <!-- Collision (nuevo para Gazebo) -->
    <collision>
      <origin xyz="${wheelbase/2} 0 ${ground_offset+height/2}"/>
      <geometry>
        <box size="${wheelbase} ${width} ${height}"/>
      </geometry>
    </collision>
    
    <!-- Inertial (nuevo para Gazebo) -->
    <inertial>
      <origin xyz="0 0 ${ground_offset+height/2}"/>
      <mass value="${chassis_mass}"/>
      <inertia ixx="0.010" ixy="0" ixz="0" iyy="0.025" iyz="0" izz="0.03"/>
    </inertial>
  </link>

  <!-- LASER MODEL -->
  <joint name="base_to_laser_model" type="fixed">
    <parent link="${car_name}/base_link"/>
    <child link="${car_name}/laser_model"/>
    <origin xyz="${laser_distance_from_base_link} 0 ${ground_offset+height+(laser_height/2)}"/>
  </joint>

  <link name="${car_name}/laser_model">
    <visual>
      <geometry>
        <cylinder radius="${laser_radius}" length="${laser_height}"/>
      </geometry>
      <material name="black"/>
    </visual>
    <!-- Collision para LIDAR -->
    <collision>
      <geometry>
        <cylinder radius="${laser_radius}" length="${laser_height}"/>
      </geometry>
    </collision>
    <!-- Inertial para LIDAR -->
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- CÁMARA ENCIMA DEL LIDAR -->
  <joint name="laser_to_camera" type="fixed">
    <parent link="${car_name}/laser_model"/>
    <child link="${car_name}/camera_link"/>
    <origin xyz="0 0 ${(laser_height/2) + camera_offset_z}" rpy="0 0 0"/>
  </joint>

  <link name="${car_name}/camera_link">
    <visual>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.05"/>
      <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
    </inertial>
  </link>

  <!-- Frame óptico de la cámara (para las imágenes) -->
  <joint name="camera_to_optical" type="fixed">
    <parent link="${car_name}/camera_link"/>
    <child link="${car_name}/camera_optical_frame"/>
    <origin xyz="0 0 0" rpy="-1.5708 0 -1.5708"/>  <!-- Rotación estándar ROS para cámaras -->
  </joint>

  <link name="${car_name}/camera_optical_frame"/>

  <!-- RUEDAS TRASERAS - Cambiamos de fixed a continuous para Gazebo -->
  
  <!-- Rueda trasera izquierda -->
  <joint name="base_to_back_left_wheel" type="continuous">  <!-- Era "fixed" -->
    <parent link="${car_name}/base_link"/>
    <child link="${car_name}/back_left_wheel"/>
    <origin xyz="0 ${(wheel_length+width)/2} ${wheel_radius}"/>
    <axis xyz="0 1 0"/>  <!-- Eje de rotación -->
    <dynamics damping="0.5" friction="0.3"/> 
  </joint>

  <link name="${car_name}/back_left_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <material name="black"/>
      <origin rpy="${pi/2} 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <origin rpy="${pi/2} 0 0"/>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <origin rpy="${pi/2} 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Rueda trasera derecha -->
  <joint name="base_to_back_right_wheel" type="continuous">  <!-- Era "fixed" -->
    <parent link="${car_name}/base_link"/>
    <child link="${car_name}/back_right_wheel"/>
    <origin xyz="0 ${-(wheel_length+width)/2} ${wheel_radius}"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="0.5" friction="0.3"/>
  </joint>

  <link name="${car_name}/back_right_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <material name="black"/>
      <origin rpy="${pi/2} 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <origin rpy="${pi/2} 0 0"/>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <origin rpy="${pi/2} 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- RUEDAS DELANTERAS CON DIRECCIÓN ACKERMANN -->
  
  <!-- Hinge delantero izquierdo - Cambiamos de fixed a revolute para dirección -->
  <joint name="base_to_front_left_hinge" type="revolute">  <!-- Era "fixed" -->
    <parent link="${car_name}/base_link"/>
    <child link="${car_name}/front_left_hinge"/>
    <origin xyz="${wheelbase} ${(wheel_length+width)/2} ${wheel_radius}"/>
    <axis xyz="0 0 1"/>  <!-- Eje de dirección (vertical) -->
    <limit lower="-0.7854" upper="0.7854" effort="100" velocity="10"/>  <!-- ±45° -->
    <dynamics damping="10.0" friction="5.0"/>
  </joint>

  <link name="${car_name}/front_left_hinge">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- Rueda delantera izquierda -->
  <joint name="front_left_hinge_to_wheel" type="continuous">
    <parent link="${car_name}/front_left_hinge"/>
    <child link="${car_name}/front_left_wheel"/>
    <axis xyz="0 1 0"/>  <!-- Eje de rotación de rueda -->
    <dynamics damping="0.5" friction="0.3"/>
  </joint>

  <link name="${car_name}/front_left_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <material name="black"/>
      <origin rpy="${pi/2} 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <origin rpy="${pi/2} 0 0"/>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <origin rpy="${pi/2} 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Hinge delantero derecho -->
  <joint name="base_to_front_right_hinge" type="revolute">  <!-- Era "fixed" -->
    <parent link="${car_name}/base_link"/>
    <child link="${car_name}/front_right_hinge"/>
    <origin xyz="${wheelbase} ${-(wheel_length+width)/2} ${wheel_radius}"/>
    <axis xyz="0 0 1"/>
    <limit lower="-0.7854" upper="0.7854" effort="100" velocity="10"/>
    <dynamics damping="10.0" friction="5.0"/>
  </joint>

  <link name="${car_name}/front_right_hinge">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- Rueda delantera derecha -->
  <joint name="front_right_hinge_to_wheel" type="continuous">
    <parent link="${car_name}/front_right_hinge"/>
    <child link="${car_name}/front_right_wheel"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="0.5" friction="0.3"/>
  </joint>

  <link name="${car_name}/front_right_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <material name="black"/>
      <origin rpy="${pi/2} 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
      </geometry>
      <origin rpy="${pi/2} 0 0"/>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <origin rpy="${pi/2} 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- INCLUIR ROS2_CONTROL SI SE ESPECIFICA -->
  <xacro:if value="$(arg use_ros2_control)">
    <xacro:include filename="$(find f1tenth_gym_ros)/launch/ros2_control_ackermann.xacro"/>
  </xacro:if>

  <!-- Plugin de Gazebo para publicar joint states (sin ros2_control) -->
  <xacro:unless value="$(arg use_ros2_control)">
    <gazebo>
      <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
        <ros>
          <namespace></namespace>
          <remapping>joint_states:=joint_states</remapping>
        </ros>
        <update_rate>50</update_rate>
        <joint_name>base_to_back_left_wheel</joint_name>
        <joint_name>base_to_back_right_wheel</joint_name>
        <joint_name>front_left_hinge_to_wheel</joint_name>
        <joint_name>front_right_hinge_to_wheel</joint_name>
        <joint_name>base_to_front_left_hinge</joint_name>
        <joint_name>base_to_front_right_hinge</joint_name>
      </plugin>
    </gazebo>
  </xacro:unless>

  <!-- PROPIEDADES DE GAZEBO -->
  <gazebo reference="${car_name}/base_link">
    <material>Gazebo/Blue</material>
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>

  <gazebo reference="${car_name}/back_left_wheel">
    <material>Gazebo/White</material>
    <mu1>${wheel_mu1}</mu1>
    <mu2>${wheel_mu2}</mu2>
  </gazebo>

  <gazebo reference="${car_name}/back_right_wheel">
    <material>Gazebo/White</material>
    <mu1>${wheel_mu1}</mu1>
    <mu2>${wheel_mu2}</mu2>
  </gazebo>

  <gazebo reference="${car_name}/front_left_wheel">
    <material>Gazebo/White</material>
    <mu1>${wheel_mu1}</mu1>
    <mu2>${wheel_mu2}</mu2>
  </gazebo>

  <gazebo reference="${car_name}/front_right_wheel">
    <material>Gazebo/White</material>
    <mu1>${wheel_mu1}</mu1>
    <mu2>${wheel_mu2}</mu2>
  </gazebo>

  <!-- Propiedades de Gazebo para la cámara depth -->
  <gazebo reference="${car_name}/camera_link">
    <material>Gazebo/Red</material>
    <sensor name="depth_camera" type="depth">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <camera>
        <horizontal_fov>1.089</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace></namespace>
          <remapping>image_raw:=image_raw</remapping>
          <remapping>image_depth:=depth/image_raw</remapping>
          <remapping>camera_info:=camera_info</remapping>
          <remapping>camera_info_depth:=depth/camera_info</remapping>
          <remapping>points:=depth/points</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>ego_racecar/camera_optical_frame</frame_name>
        <hack_baseline>0.07</hack_baseline>
        <min_depth>0.1</min_depth>
        <max_depth>100.0</max_depth>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="${car_name}/laser_model">
    <material>Gazebo/Black</material>
    <sensor type="ray" name="hokuyo">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-3.141593</min_angle>
            <max_angle>3.141593</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace></namespace>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>ego_racecar/laser_model</frame_name>
      </plugin>
    </sensor>
  </gazebo>

</robot>